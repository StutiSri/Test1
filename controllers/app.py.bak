## -*- coding: utf-8 -*-
# try something like
error_message= ''
from random import randint
@service.json
def shopkeeper_login(shopkeeper_id):
    rows = db(db.tbl_shopkeeper.id==shopkeeper_id).select()
    shopkeeper=rows[0]
    if shopkeeper.shopkeeper_password is None:
        n = randint(4, 6)
        range_start = 10**(n-1)
        range_end = (10**n)-1
        otp = randint(range_start, range_end)
        message = 'No password set yet,otp : '+str(otp)
    return dict(message=message)

def call():
    session.forget()
    return service()

@request.restful()
def shopkeeper_api():
    response.view = 'generic.json'
#     def GET(tablename,id):
#         if not tablename=='tbl_shopkeeper': raise HTTP(400)
#         shopkeeper = db.tbl_shopkeeper(id)
#         if shopkeeper['shopkeeper_password'] is None:
#             n = randint(4, 6)
#             range_start = 10**(n-1)
#             range_end = (10**n)-1
#             otp = randint(range_start, range_end)
#             shopkeeper['shopkeeper_otp'] = otp
#             shopkeeper.update_record()
#             shopkeeper_details = {'shopkeeper_id':id,'otp':otp}
#         return dict(success='OK',shopkeeper_details = shopkeeper_details)
    def GET(*args,**vars):
        patterns = [
            "/shopkeeper/{tbl_shopkeeper.id}",
            "/shopkeeper/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_otp}/{tbl_shopkeeper.shopkeeper_password}",
            "/shopkeeper_login/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_password}",
            "/shopkeeper_login_forgot_password/{tbl_shopkeeper.id}",
            "/shopkeeper_reset_password/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_otp}"
            ]
        parser = db.parse_as_rest(patterns,args,vars)
        if parser.status == 200:
            id = args[1]
            rows = db(db.tbl_shopkeeper.id==id).select()
            shopkeeper=rows[0]
            if shopkeeper is None:
                    return dict(success='NOK',error_message = 'Kindly register with us before proceeding.')
            #print(str(shopkeeper))
            if parser.pattern == patterns[0]:
                if shopkeeper.shopkeeper_password is None:
                    otp = generate_otp(shopkeeper)
                    shopkeeper_details = {'shopkeeper_id':id,'set_password_otp':otp}
                    return dict(success='OK',results=shopkeeper_details)
                else:
                    return dict(success='NOK',error_message = 'Password is already set. Please try Forgot Password option if you have forgotten your password.')
            elif parser.pattern == patterns[1]:
                    #print(args[2]+" "+shopkeeper.shopkeeper_otp)
                    if shopkeeper.shopkeeper_password is None and str(shopkeeper.shopkeeper_otp) == args[2]:
                        password = args[3]
                        if validatePassword(args[3]):
                            shopkeeper['shopkeeper_password'] = password
                            shopkeeper.update_record()
                            results={'id':id,'password_set':'success'}
                            #db.auth_user.insert()
                            return dict(success='OK',results=results)
                        else :
                            return dict(success='NOK',error_message = error_message)
                    else:
                        if shopkeeper.shopkeeper_password is not None:
                            return dict(success='NOK',error_message = 'Password is already set. Please try Forgot Password option if you have forgotten your password.')
                        else:
                            return dict(success='NOK',error_message = 'Invalid OTP. Please try again.')
            elif parser.pattern == patterns[2]:
                password = args[2]
                if shopkeeper.shopkeeper_password == password:
                    #rows = db.tbl_shops(db.tbl_shop_shopkeeper_mapping.shopkeeper_id==id).select()
                    rows = db.executesql('SELECT * FROM tbl_shop_shopkeeper_mapping WHERE shopkeeper_id = \''+str(id)+'\';',as_dict=True)
                    shops=[]
                    for row in rows:
                        shop_id = row['shop_id']
                        #shop = db(db.tbl_shops.id==shop_id).select()[0]
                        shop = db.executesql('SELECT * FROM tbl_shops WHERE id = '+str(shop_id)+';',as_dict=True)[0]
                        rows_categories = db.executesql('select shop_id,cat.category_name from tbl_shop_category_mapping scat join tbl_categories cat on cat.id = scat.category_id WHERE shop_id = '+str(shop_id)+';',as_dict=True)
                        categories=''
                        print(rows_categories)
                        for row_category in rows_categories:
                            if len(categories)!=0:
                                categories+=','
                            categories+=row_category['category_name']
                        shop.add({'categories':categories})
                        shops.append(shop)
                    shopkeeper_details = {'shopkeeper_id':id,'shopkeeper_name':shopkeeper.shopkeeper_name,
                                             'shopkeeper_phone_number' : shopkeeper.shopkeeper_phone_number,
                                              'shopkeeper_email_id' : shopkeeper.shopkeeper_email_id,
                                             'shops' : shops}
                    return dict(success='OK',results = shopkeeper_details)
                else:
                    return dict(success='NOK',error_message = 'Invalid password. Please try again.')
            elif parser.pattern == patterns[3]:
                return test_mail()
                forgot_password = generate_forgot_password_message(shopkeeper)
                mail_sent_status = mail.send(to=['stutisrivastv@gmail.com'],
                          subject='Reset your Waochers Password',message=forgot_password)
                shopkeeper_details = {'id':id,'forgot_password_mail_sent':mail_sent_status}
                if mail_sent_status:
                    return dict(success='OK',results = shopkeeper_details)
                else:
                    return dict(success='NOK',results = shopkeeper_details)
            elif parser.pattern == patterns[4]:
                redirect(URL('reset_password'))
                if shopkeeper.shopkeeper_password is not None and str(shopkeeper.shopkeeper_otp) == args[2]:
                            password = shopkeeper['shopkeeper_password']
                            results={'id':id,'password':password}
                            return dict(success='OK',results=results)
                else:
                    if shopkeeper.shopkeeper_password is not None:
                        return dict(success='NOK',error_message = 'Password is already set. Please try Forgot Password option if you have forgotten your password.')
                    else:
                        return dict(success='NOK',error_message = 'Invalid OTP. Please try again.')
    return locals()

def validatePassword(password):
    return True

def generateOtp(shopkeeper):
    n = randint(4, 6)
    range_start = 10**(n-1)
    range_end = (10**n)-1
    otp = randint(range_start, range_end)
    shopkeeper['shopkeeper_otp'] = otp
    shopkeeper.update_record()
    return otp

def generate_forgot_password_message(shopkeeper):
    print(str(shopkeeper))
    otp = generateOtp(shopkeeper)
    print(str(otp))
    link = 'http://127.0.0.1:8000/Test1/app/shopkeeper_api/shopkeeper_reset_password/'+str(shopkeeper.id)+'/'+str(otp)
    print(link)
    message = "<html><body>Hi "+shopkeeper.shopkeeper_name+", <br />\tYou recently requested to reset you Waochers Shopkeeper Account password. Click the below button to reset it. You will be navigated to a new page where you will enter OTP received on you registered number to verify yourself and then continue to resetting your password<br/><br/><table cellspacing=\"0\" cellpadding=\"0\"><tr><td align=\"center\" width=\"300\" height=\"40\" bgcolor=\"#500090\" style=\"-webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px; color: #ffffff; display: block;\"><a href=\""+link+"\" style=\"font-size:16px; font-weight: bold; font-family: Helvetica, Arial, sans-serif; text-decoration: none; line-height:40px; width:100%; display:inline-block\"><span style=\"color: #FFFFFF\">Password Your Password</span></a></td></tr></table><br/>If you did not request a password reset, kindly ignore this link. The link will be active for next 30 minutes.<br/><br/>For any queries please feel free to write to us at support@waochers.com<br/>Best regards,<br /><br/>The Waochers team<br /></body></html>"
    return message

def shopkeeper_reset_password():
    form= auth.request_reset_password()
    return dict(form=form)

def test_mail():
    mail = auth.settings.mailer
    bases = ['gmail.com']
    prefixes = ['smtp.', 'mail.', '']
    ports = [':25' ':465', ':993', ':587', '']
    sender = 'stutisrivastv@gmail.com'
    login = 'stutisrivastv@gmail.com:zindagihaseenh!'
    send_test_to = 'stutisrivastv@gmail.com'
    count = 0
    mail.settings.tls = True #Here so you can set to False if things fail?
    for base in bases:
        for prefix in prefixes:
            for port in ports:
                server = '{0}{1}{2}'.format(prefix, base, port)
                msg = 'server: {0} login: {1}'.format(server, login)
                # So you can correlate with error codes. Note some servers don't like print!
                print msg
                mail.settings.server = server
                mail.settings.sender = sender
                mail.settings.login = login
                mail.send(to=[send_test_to],
                        subject='hello',
                        reply_to='us@example.com',
                        message=msg
                        )
                count += 1
    return dict(message="tried {0} combinations".format(count))
