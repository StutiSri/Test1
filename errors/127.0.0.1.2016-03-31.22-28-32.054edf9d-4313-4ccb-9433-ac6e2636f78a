(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> object of type 'NoneType' has no len()"
p3
sS'layer'
p4
S'/home/stutisrivastava/web2py/applications/Test1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n#released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    message = session.successmessage\n    if len(message)==0:\n        message = \'\'\n    return dict(message=message)\n\ndef register_shop():\n    message=\'\'\n    fields = []\n    categories = db().select(db.tbl_categories.ALL)\n    for category in categories:\n        fields.append(Field(category.category_field_name, \'boolean\',label=category.category_name,default=category.id))\n    form=SQLFORM.factory(db.tbl_shops,*fields)\n    if form.process().accepted:\n        new_shop_id = db.tbl_shops.insert(**db.tbl_shops._filter_fields(form.vars))\n        form.vars.tbl_shop=new_shop_id\n        i=0\n        categoryCount=0\n        categoryCheckboxes=[]\n        for field in fields:\n            categoryCheckboxes.append(request.vars.get(field.name))\n        for category in categoryCheckboxes:\n            print(str(category))\n            if category:\n                #record = db.tbl_categories(id,category_name=fields[i].default)\n                db[\'tbl_shop_category_mapping\'].insert(shop_id=new_shop_id,category_id=fields[i].default)\n                categoryCount = categoryCount+1\n            i = i+1\n        if categoryCount>0:\n            db.commit()\n            message=\'Shop registered successfully. Your shop id is : \'+str(new_shop_id)\n        else:\n            message = \'Please specify atleast one category for your shop\'\n    return dict(form=form,message=message)\n\ndef register_shopkeeperform():\n    return shopkeeperRegistration(db.tbl_shopkeeper,True)\n\ndef shopkeeperRegistration(table,isNewShopkeeper):\n    message = \'\'\n    fields = getUnmappedShops()\n    if len(fields)>0:\n        hasLinkedShops = False\n        form=SQLFORM.factory(table,*fields)\n        if form.process().accepted:\n            for field in fields:\n                shop = request.vars.get(field.name)\n                if shop:\n                    if isNewShopkeeper:\n                        new_shopkeeper_id = db.tbl_shopkeeper.insert(**db.tbl_shopkeeper._filter_fields(form.vars))\n                    else:\n                        new_shopkeeper_id = request.vars.get(\'shopkeeper_id\')\n                    hasLinkedShops = True\n                    break\n            if hasLinkedShops:\n                print(new_shopkeeper_id)\n                form.vars.tbl_shopkeeper=new_shopkeeper_id\n                shopCount = linkShops(fields,new_shopkeeper_id)\n                session.new_shopkeeper_id = new_shopkeeper_id\n                if isNewShopkeeper:\n                    redirect(URL(\'shopkeeper_account_details\'))\n                else:\n                    session.successmessage = \'Shops successfully linked with shopkeeper id : \'+str(new_shopkeeper_id)\n                    redirect(URL(\'index\'))\n            else:\n                message = \'Please associate atleast one shop with shopkeeper\'\n                response.flash = \'Failed\'\n    else:\n        message = \'No unregistered shops left. Kindly register a shop before proceeding\'\n        form = \'\'\n    return dict(message=message,form=form)\n\ndef isNotMapped(shop, shopMappings):\n    for shopMapping in shopMappings:\n        print(\'shop id : \'+ str(shop.id) + \' shopMapping shop id : \' + str(shopMapping.shop_id))\n        if str(shop.id) == str(shopMapping.shop_id):\n            return False\n    return True\n\ndef linkShops(fields,shopkeeper_id):\n    i=0\n    shopCheckboxes=[]\n    for field in fields:\n        shopCheckboxes.append(request.vars.get(field.name))\n    for shop in shopCheckboxes:\n        print(str(shop))\n        if shop:\n            db[\'tbl_shop_shopkeeper_mapping\'].insert(shop_id=fields[i].default,shopkeeper_id=shopkeeper_id)\n        i = i+1\n    db.commit();\n\ndef getUnmappedShops():\n    shops = db().select(db.tbl_shops.ALL)\n    shopMappings = db().select(db.tbl_shop_shopkeeper_mapping.ALL)\n    fields=[]\n    for shop in shops:\n        if isNotMapped(shop,shopMappings):\n                fields.append(Field(shop.shop_name, \'boolean\',label=shop.shop_name,default=shop.id))\n    print(str(fields))\n    return fields\n\ndef shopkeeper_account_details():\n    message=\'Shopkeeper registered successfully. Your shopkeeper id is : \'+str(session.new_shopkeeper_id)\n    form=SQLFORM.factory(db.tbl_account_details)\n    print(str(form.custom.widget[\'uses_ifsc\']))   #to get id\n    if form.process().accepted:\n        for var in form.vars:\n            print(str(var))\n        db[\'tbl_account_details\'].insert(**form.vars)\n        session.successmessage = \'Account successfully associated with shopkeeper id : \' + str(session.new_shopkeeper_id)\n        redirect(URL(\'index\'))\n    return dict(message=message,form=form)\n\ndef success():\n    return dict(message=session.successmessage)\n\ndef link_shop_with_shopkeeper():\n    return shopkeeperRegistration(db.tbl_shop_shopkeeper_mapping,False)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/stutisrivastava/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/default.py", line 167, in <module>\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/default.py", line 13, in index\n    if len(message)==0:\nTypeError: object of type \'NoneType\' has no len()\n'
p11
s.