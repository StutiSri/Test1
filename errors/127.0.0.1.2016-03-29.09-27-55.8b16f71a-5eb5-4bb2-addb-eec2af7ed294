(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'true' is not defined"
p3
sS'layer'
p4
S'/home/stutisrivastava/web2py/applications/Test1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n#released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    #response.view = \'default/index.json\'\n    if not session.counter:\n        session.counter = 1\n    else:\n        session.counter += 1\n    return dict(message="Test1 welcomes you", counter=session.counter)\n\ndef register_shop():\n    message=\'\'\n    fields = []\n    categories = db().select(db.tbl_categories.ALL)\n    for category in categories:\n        fields.append(Field(category.category_field_name, \'boolean\',label=category.category_name,default=category.id))\n    form=SQLFORM.factory(db.tbl_shops,*fields)\n    if form.process().accepted:\n        new_shop_id = db.tbl_shops.insert(**db.tbl_shops._filter_fields(form.vars))\n        form.vars.tbl_shop=new_shop_id\n        i=0\n        categoryCount=0\n        categoryCheckboxes=[]\n        for field in fields:\n            categoryCheckboxes.append(request.vars.get(field.name))\n        for category in categoryCheckboxes:\n            print(str(category))\n            if category:\n                #record = db.tbl_categories(id,category_name=fields[i].default)\n                db[\'tbl_shop_category_mapping\'].insert(shop_id=new_shop_id,category_id=fields[i].default)\n                categoryCount = categoryCount+1\n            i = i+1\n        if categoryCount>0:\n            db.commit()\n            message=\'Shop registered successfully. Your shop id is : \'+str(new_shop_id)\n        else:\n            message = \'Please specify atleast one category for your shop\'\n    return dict(form=form,message=message)\n\ndef register_shopkeeperform():\n    shops = db().select(db.tbl_shops.ALL)\n    shopMappings = db().select(db.tbl_shop_shopkeeper_mapping.ALL)\n    fields=[]\n    for shop in shops:\n        if isNotMapped(shop,shopMappings):\n            fields.append(Field(shop.shop_name, \'boolean\',label=shop.shop_name,default=shop.shop_id))\n    if len(fields):\n        form=SQLFORM.factory(db.tbl_shopkeeper,*fields)\n        if form.process().accepted:\n            new_shopkeeper_id = db.tbl_shopkeeper.insert(**db.tbl_shopkeeper._filter_fields(form.vars))\n            form.vars.tbl_shopkeeper=new_shopkeeper_id\n            i=0\n            shopCount=0\n            shopCheckboxes=[]\n            for field in fields:\n                shopCheckboxes.append(request.vars.get(field.name))\n            for shop in shopCheckboxes:\n                print(str(shop))\n                if shop:\n                    #record = db.tbl_categories(id,category_name=fields[i].default)\n                    db[\'tbl_shop_shopkeeper_mapping\'].insert(shopkeeper_id=new_shopkeeper_id,shop_id=fields[i].default)\n                    shopCount = shopCount+1\n                i = i+1\n            if shopCount>0:\n                db.commit()\n                message=\'Shopkeeper registered successfully. Your shopkeeper id is : \'+str(new_shop_id)\n                redirect(URL(\'shopkeeper_account_details\'))\n            else:\n                message = \'Please associate atleast one shop with shopkeeper\'\n    else:\n        message = \'No unregistered shops left. Kindly register a shop before proceeding\'\n        form = null\n    return dict(message=message,form=form)\n\ndef isNotMapped(shop, shopMappings):\n    for shopMapping in shopMappings:\n        if shop.shop_id == shopMappings.shop_id:\n            return false\n    return true\n\ndef shopkeeper_account_details():\n    form=SQLFORM.factory(db.tbl_account_details)\n    if form.process().accepted:\n        db[\'tbl_account_details\'].insert(**form.vars)\n        session.shopkeeper_name = form.vars.shopkeeper_name\n        redirect(URL(\'successful_shopkeeper_registration\'))\n    return dict(form=form)\n\ndef validation():\n    if request.vars.shopkeeper_name:\n        session.shopkeeper_name= request.vars.shopkeeper_name\n    if request.vars.shopkeeper_email_id:\n        session.shopkeeper_email_id= request.vars.shopkeeper_email_id\n    if request.vars.shopkeeper_phone_number:\n        session.shopkeeper_phone_number= request.vars.shopkeeper_phone_number\n    if request.vars.shop_name:\n        session.shop_name= request.vars.shop_name\n    if request.vars.shop_address:\n        session.shop_address= request.vars.shop_address\n    if request.vars.shop_area:\n        session.shop_area= request.vars.shop_area\n    if request.vars.min_discount:\n        session.min_discount= request.vars.min_discount\n    if request.vars.category_name!="--Select--":\n        session.category_name= request.vars.category_name\n    if request.vars.account_number:\n        session.account_number= request.vars.account_number\n    if request.vars.accountee_name:\n        session.accountee_name= request.vars.accountee_name\n    if request.vars.account_type!="--Select--":\n        session.account_type= request.vars.account_type\n    if (request.vars.ifsc_code or (request.vars.bank_name and request.vars.bank_city and request.vars.bank_branch_name)):\n        if request.vars.ifsc_code:\n            session.ifsc_code= request.vars.ifsc_code\n        else:\n            session.bank_name= request.vars.bank_name\n            session.bank_city= request.vars.bank_city\n            session.bank_branch_name= request.vars.bank_branch_name\n    return true\n\ndef successful_shopkeeper_registration():\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(register_shopkeeperform)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/stutisrivastava/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/default.py", line 169, in <module>\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/default.py", line 53, in register_shopkeeperform\n    if isNotMapped(shop,shopMappings):\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/default.py", line 87, in isNotMapped\n    return true\nNameError: global name \'true\' is not defined\n'
p11
s.