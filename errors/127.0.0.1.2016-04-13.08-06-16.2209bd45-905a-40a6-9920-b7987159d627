(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'row_catgeory' is not defined"
p3
sS'layer'
p4
S'/home/stutisrivastava/web2py/applications/Test1/controllers/app.py'
p5
sS'code'
p6
S'## -*- coding: utf-8 -*-\n# try something like\nerror_message= \'\'\nfrom random import randint\n@service.json\ndef shopkeeper_login(shopkeeper_id):\n    rows = db(db.tbl_shopkeeper.id==shopkeeper_id).select()\n    shopkeeper=rows[0]\n    if shopkeeper.shopkeeper_password is None:\n        n = randint(4, 6)\n        range_start = 10**(n-1)\n        range_end = (10**n)-1\n        otp = randint(range_start, range_end)\n        message = \'No password set yet,otp : \'+str(otp)\n    return dict(message=message)\n\ndef call():\n    session.forget()\n    return service()\n\n@request.restful()\ndef shopkeeper_api():\n    response.view = \'generic.json\'\n#     def GET(tablename,id):\n#         if not tablename==\'tbl_shopkeeper\': raise HTTP(400)\n#         shopkeeper = db.tbl_shopkeeper(id)\n#         if shopkeeper[\'shopkeeper_password\'] is None:\n#             n = randint(4, 6)\n#             range_start = 10**(n-1)\n#             range_end = (10**n)-1\n#             otp = randint(range_start, range_end)\n#             shopkeeper[\'shopkeeper_otp\'] = otp\n#             shopkeeper.update_record()\n#             shopkeeper_details = {\'shopkeeper_id\':id,\'otp\':otp}\n#         return dict(success=\'OK\',shopkeeper_details = shopkeeper_details)\n    def GET(*args,**vars):\n        patterns = [\n            "/shopkeeper/{tbl_shopkeeper.id}",\n            "/shopkeeper/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_otp}/{tbl_shopkeeper.shopkeeper_password}",\n            "/shopkeeper_login/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_password}",\n            "/shopkeeper_login_forgot_password/{tbl_shopkeeper.id}",\n            "/shopkeeper_reset_password/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_otp}"\n            ]\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            id = args[1]\n            rows = db(db.tbl_shopkeeper.id==id).select()\n            shopkeeper=rows[0]\n            if shopkeeper is None:\n                    return dict(success=\'NOK\',error_message = \'Kindly register with us before proceeding.\')\n            #print(str(shopkeeper))\n            if parser.pattern == patterns[0]:\n                if shopkeeper.shopkeeper_password is None:\n                    otp = generate_otp(shopkeeper)\n                    shopkeeper_details = {\'shopkeeper_id\':id,\'set_password_otp\':otp}\n                    return dict(success=\'OK\',results=shopkeeper_details)\n                else:\n                    return dict(success=\'NOK\',error_message = \'Password is already set. Please try Forgot Password option if you have forgotten your password.\')\n            elif parser.pattern == patterns[1]:\n                    #print(args[2]+" "+shopkeeper.shopkeeper_otp)\n                    if shopkeeper.shopkeeper_password is None and str(shopkeeper.shopkeeper_otp) == args[2]:\n                        password = args[3]\n                        if validatePassword(args[3]):\n                            shopkeeper[\'shopkeeper_password\'] = password\n                            shopkeeper.update_record()\n                            results={\'id\':id,\'password_set\':\'success\'}\n                            #db.auth_user.insert()\n                            return dict(success=\'OK\',results=results)\n                        else :\n                            return dict(success=\'NOK\',error_message = error_message)\n                    else:\n                        if shopkeeper.shopkeeper_password is not None:\n                            return dict(success=\'NOK\',error_message = \'Password is already set. Please try Forgot Password option if you have forgotten your password.\')\n                        else:\n                            return dict(success=\'NOK\',error_message = \'Invalid OTP. Please try again.\')\n            elif parser.pattern == patterns[2]:\n                password = args[2]\n                if shopkeeper.shopkeeper_password == password:\n                    #rows = db.tbl_shops(db.tbl_shop_shopkeeper_mapping.shopkeeper_id==id).select()\n                    rows = db.executesql(\'SELECT * FROM tbl_shop_shopkeeper_mapping WHERE shopkeeper_id = \\\'\'+str(id)+\'\\\';\',as_dict=True)\n                    shops=[]\n                    for row in rows:\n                        shop_id = row[\'shop_id\']\n                        #shop = db(db.tbl_shops.id==shop_id).select()[0]\n                        shop = db.executesql(\'SELECT * FROM tbl_shops WHERE id = \'+str(shop_id)+\';\',as_dict=True)[0]\n                        rows_categories = db.executesql(\'select shop_id,cat.category_name from tbl_shop_category_mapping scat join tbl_categories cat on cat.id = scat.category_id WHERE shop_id = \'+str(shop_id)+\';\')\n                        categories=\'\'\n                        for row_category in rows_categories:\n                            if len(categories)!=0:\n                                categories+=\',\'\n                            categories+=row_catgeory.category_name\n                        shop.append({\'categories\':categories})\n                        shops.append(shop)\n                    shopkeeper_details = {\'shopkeeper_id\':id,\'shopkeeper_name\':shopkeeper.shopkeeper_name,\n                                             \'shopkeeper_phone_number\' : shopkeeper.shopkeeper_phone_number,\n                                              \'shopkeeper_email_id\' : shopkeeper.shopkeeper_email_id,\n                                             \'shops\' : shops}\n                    return dict(success=\'OK\',results = shopkeeper_details)\n                else:\n                    return dict(success=\'NOK\',error_message = \'Invalid password. Please try again.\')\n            elif parser.pattern == patterns[3]:\n                return test_mail()\n                forgot_password = generate_forgot_password_message(shopkeeper)\n                mail_sent_status = mail.send(to=[\'stutisrivastv@gmail.com\'],\n                          subject=\'Reset your Waochers Password\',message=forgot_password)\n                shopkeeper_details = {\'id\':id,\'forgot_password_mail_sent\':mail_sent_status}\n                if mail_sent_status:\n                    return dict(success=\'OK\',results = shopkeeper_details)\n                else:\n                    return dict(success=\'NOK\',results = shopkeeper_details)\n            elif parser.pattern == patterns[4]:\n                redirect(URL(\'reset_password\'))\n                if shopkeeper.shopkeeper_password is not None and str(shopkeeper.shopkeeper_otp) == args[2]:\n                            password = shopkeeper[\'shopkeeper_password\']\n                            results={\'id\':id,\'password\':password}\n                            return dict(success=\'OK\',results=results)\n                else:\n                    if shopkeeper.shopkeeper_password is not None:\n                        return dict(success=\'NOK\',error_message = \'Password is already set. Please try Forgot Password option if you have forgotten your password.\')\n                    else:\n                        return dict(success=\'NOK\',error_message = \'Invalid OTP. Please try again.\')\n    return locals()\n\ndef validatePassword(password):\n    return True\n\ndef generateOtp(shopkeeper):\n    n = randint(4, 6)\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    otp = randint(range_start, range_end)\n    shopkeeper[\'shopkeeper_otp\'] = otp\n    shopkeeper.update_record()\n    return otp\n\ndef generate_forgot_password_message(shopkeeper):\n    print(str(shopkeeper))\n    otp = generateOtp(shopkeeper)\n    print(str(otp))\n    link = \'http://127.0.0.1:8000/Test1/app/shopkeeper_api/shopkeeper_reset_password/\'+str(shopkeeper.id)+\'/\'+str(otp)\n    print(link)\n    message = "<html><body>Hi "+shopkeeper.shopkeeper_name+", <br />\\tYou recently requested to reset you Waochers Shopkeeper Account password. Click the below button to reset it. You will be navigated to a new page where you will enter OTP received on you registered number to verify yourself and then continue to resetting your password<br/><br/><table cellspacing=\\"0\\" cellpadding=\\"0\\"><tr><td align=\\"center\\" width=\\"300\\" height=\\"40\\" bgcolor=\\"#500090\\" style=\\"-webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px; color: #ffffff; display: block;\\"><a href=\\""+link+"\\" style=\\"font-size:16px; font-weight: bold; font-family: Helvetica, Arial, sans-serif; text-decoration: none; line-height:40px; width:100%; display:inline-block\\"><span style=\\"color: #FFFFFF\\">Password Your Password</span></a></td></tr></table><br/>If you did not request a password reset, kindly ignore this link. The link will be active for next 30 minutes.<br/><br/>For any queries please feel free to write to us at support@waochers.com<br/>Best regards,<br /><br/>The Waochers team<br /></body></html>"\n    return message\n\ndef shopkeeper_reset_password():\n    form= auth.request_reset_password()\n    return dict(form=form)\n\ndef test_mail():\n    mail = auth.settings.mailer\n    bases = [\'gmail.com\']\n    prefixes = [\'smtp.\', \'mail.\', \'\']\n    ports = [\':25\' \':465\', \':993\', \':587\', \'\']\n    sender = \'stutisrivastv@gmail.com\'\n    login = \'stutisrivastv@gmail.com:zindagihaseenh!\'\n    send_test_to = \'stutisrivastv@gmail.com\'\n    count = 0\n    mail.settings.tls = True #Here so you can set to False if things fail?\n    for base in bases:\n        for prefix in prefixes:\n            for port in ports:\n                server = \'{0}{1}{2}\'.format(prefix, base, port)\n                msg = \'server: {0} login: {1}\'.format(server, login)\n                # So you can correlate with error codes. Note some servers don\'t like print!\n                print msg\n                mail.settings.server = server\n                mail.settings.sender = sender\n                mail.settings.login = login\n                mail.send(to=[send_test_to],\n                        subject=\'hello\',\n                        reply_to=\'us@example.com\',\n                        message=msg\n                        )\n                count += 1\n    return dict(message="tried {0} combinations".format(count))\n\nresponse._vars=response._caller(shopkeeper_api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/stutisrivastava/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 177, in <module>\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 91, in GET\n    categories+=row_catgeory.category_name\nNameError: global name \'row_catgeory\' is not defined\n'
p11
s.