(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> id() takes exactly one argument (0 given)"
p3
sS'layer'
p4
S'/home/stutisrivastava/web2py/applications/Test1/controllers/app.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\nfrom random import randint\n@service.json\ndef shopkeeper_login(shopkeeper_id):\n    rows = db(db.tbl_shopkeeper.id==shopkeeper_id).select()\n    shopkeeper=rows[0]\n    if shopkeeper.shopkeeper_password is None:\n        n = randint(4, 6)\n        range_start = 10**(n-1)\n        range_end = (10**n)-1\n        otp = randint(range_start, range_end)\n        message = \'No password set yet,otp : \'+str(otp)\n    return dict(message=message)\n\ndef call():\n    session.forget()\n    return service()\n\n@request.restful()\ndef api():\n    response.view = \'generic.json\'\n#     def GET(tablename,id):\n#         if not tablename==\'tbl_shopkeeper\': raise HTTP(400)\n#         shopkeeper = db.tbl_shopkeeper(id)\n#         if shopkeeper[\'shopkeeper_password\'] is None:\n#             n = randint(4, 6)\n#             range_start = 10**(n-1)\n#             range_end = (10**n)-1\n#             otp = randint(range_start, range_end)\n#             shopkeeper[\'shopkeeper_otp\'] = otp\n#             shopkeeper.update_record()\n#             shopkeeper_details = {\'shopkeeper_id\':id,\'otp\':otp}\n#         return dict(success=\'OK\',shopkeeper_details = shopkeeper_details)\n    def GET(*args,**vars):\n        patterns = [\n            "/shopkeeper/{tbl_shopkeeper.id}"\n            ]\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            rows = db(db.tbl_shopkeeper.id==id).select()\n            shopkeeper=rows[0]\n            print(str(shopkeeper))\n            if shopkeeper[0].shopkeeper_password is None:\n                n = randint(4, 6)\n                range_start = 10**(n-1)\n                range_end = (10**n)-1\n                otp = randint(range_start, range_end)\n                shopkeeper[\'shopkeeper_otp\'] = otp\n                shopkeeper.update_record()\n                shopkeeper_details = {\'shopkeeper_id\':id,\'otp\':otp}\n                return dict(success=\'OK\',shopkeeper_details = shopkeeper_details)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(tablename,**fields):\n        if not tablename==\'person\': raise HTTP(400)\n        return db.person.validate_and_insert(**fields)\n    return locals()\n\nresponse._vars=response._caller(api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/stutisrivastava/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 60, in <module>\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 41, in GET\n    rows = db(db.tbl_shopkeeper.id==id).select()\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 349, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/stutisrivastava/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1393, in represent\n    obj = obj()\nTypeError: id() takes exactly one argument (0 given)\n'
p11
s.