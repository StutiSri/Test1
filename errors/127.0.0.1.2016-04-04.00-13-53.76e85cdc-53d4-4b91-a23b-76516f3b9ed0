(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'long' objects"
p3
sS'layer'
p4
S'/home/stutisrivastava/web2py/applications/Test1/controllers/app.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\nerror_message= \'\'\nfrom random import randint\n@service.json\ndef shopkeeper_login(shopkeeper_id):\n    rows = db(db.tbl_shopkeeper.id==shopkeeper_id).select()\n    shopkeeper=rows[0]\n    if shopkeeper.shopkeeper_password is None:\n        n = randint(4, 6)\n        range_start = 10**(n-1)\n        range_end = (10**n)-1\n        otp = randint(range_start, range_end)\n        message = \'No password set yet,otp : \'+str(otp)\n    return dict(message=message)\n\ndef call():\n    session.forget()\n    return service()\n\n@request.restful()\ndef api():\n    response.view = \'generic.json\'\n#     def GET(tablename,id):\n#         if not tablename==\'tbl_shopkeeper\': raise HTTP(400)\n#         shopkeeper = db.tbl_shopkeeper(id)\n#         if shopkeeper[\'shopkeeper_password\'] is None:\n#             n = randint(4, 6)\n#             range_start = 10**(n-1)\n#             range_end = (10**n)-1\n#             otp = randint(range_start, range_end)\n#             shopkeeper[\'shopkeeper_otp\'] = otp\n#             shopkeeper.update_record()\n#             shopkeeper_details = {\'shopkeeper_id\':id,\'otp\':otp}\n#         return dict(success=\'OK\',shopkeeper_details = shopkeeper_details)\n    def GET(*args,**vars):\n        patterns = [\n            "/shopkeeper/{tbl_shopkeeper.id}",\n            "/shopkeeper/{tbl_shopkeeper.id}/{tbl_shopkeeper.shopkeeper_otp}/{tbl_shopkeeper.shopkeeper_password}"\n            ]\n        parser = db.parse_as_rest(patterns,args,vars)\n        print(str(parser))\n        print(str(args))\n        print(str(vars))\n        if parser.status == 200:\n            id = args[1]\n            if parser.pattern == patterns[0]:\n                rows = db(db.tbl_shopkeeper.id==id).select()\n                shopkeeper=rows[0]\n                print(str(shopkeeper))\n                if shopkeeper.shopkeeper_password is None:\n                    n = randint(4, 6)\n                    range_start = 10**(n-1)\n                    range_end = (10**n)-1\n                    otp = randint(range_start, range_end)\n                    shopkeeper[\'shopkeeper_otp\'] = otp\n                    shopkeeper.update_record()\n                    shopkeeper_details = {\'shopkeeper_id\':id,\'otp\':otp}\n                    return dict(success=\'OK\',is_password_set=\'False\',shopkeeper_details=shopkeeper_details)\n                else:\n                    shopkeeper_details = {\'shopkeeper_id\':id}\n                    return dict(success=\'OK\',is_password_set = \'True\',shopkeeper_details = shopkeeper_details)\n            elif parser.pattern == patterns[1]:\n                rows = db(db.tbl_shopkeeper.id==id).select()\n                shopkeeper=rows[0]\n                print(str(shopkeeper))\n                print(args[2]+" "+shopkeeper.shopkeeper_otp)\n                if shopkeeper.shopkeeper_otp == args[2]:\n                    password = args[3]\n                    print(\'password =\'+ str(password))\n                    if validatePassword(args[3]):\n                        shopkeeper[\'shopkeeper_password\'] = password\n                        shopkeeper.update_record()\n                        return dict(success=\'OK\',password_set=\'success\')\n                    else :\n                        return dict(success=\'OK\',password_set = \'failed\',error_message = error_message)\n                else:\n                    return dict(success=\'OK\',is_password_set = \'True\')\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(tablename,**fields):\n        if not tablename==\'person\': raise HTTP(400)\n        return db.person.validate_and_insert(**fields)\n    return locals()\n\ndef validatePassword(password):\n    return True\n\nresponse._vars=response._caller(api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/stutisrivastava/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 89, in <module>\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/stutisrivastava/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/stutisrivastava/web2py/applications/Test1/controllers/app.py", line 67, in GET\n    print(args[2]+" "+shopkeeper.shopkeeper_otp)\nTypeError: cannot concatenate \'str\' and \'long\' objects\n'
p11
s.